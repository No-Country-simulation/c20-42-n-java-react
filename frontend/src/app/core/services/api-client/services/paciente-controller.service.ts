/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {crearPaciente, CrearPaciente$Params} from '../fn/paciente-controller/crear-paciente';
import {editarPaciente, EditarPaciente$Params} from '../fn/paciente-controller/editar-paciente';
import {eliminarPaciente, EliminarPaciente$Params} from '../fn/paciente-controller/eliminar-paciente';
import {obtenerPaciente, ObtenerPaciente$Params} from '../fn/paciente-controller/obtener-paciente';
import {obtenerPacientes, ObtenerPacientes$Params} from '../fn/paciente-controller/obtener-pacientes';
import {PacienteRes} from '../models/paciente-res';

@Injectable({ providedIn: 'root' })
export class PacienteControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `obtenerPaciente()` */
  static readonly ObtenerPacientePath = '/pacientes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `obtenerPaciente()` instead.
   *
   * This method doesn't expect any request body.
   */
  obtenerPaciente$Response(params: ObtenerPaciente$Params, context?: HttpContext): Observable<StrictHttpResponse<PacienteRes>> {
    return obtenerPaciente(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `obtenerPaciente$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  obtenerPaciente(params: ObtenerPaciente$Params, context?: HttpContext): Observable<PacienteRes> {
    return this.obtenerPaciente$Response(params, context).pipe(
      map((r: StrictHttpResponse<PacienteRes>): PacienteRes => r.body)
    );
  }

  /** Path part for operation `editarPaciente()` */
  static readonly EditarPacientePath = '/pacientes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editarPaciente()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editarPaciente$Response(params: EditarPaciente$Params, context?: HttpContext): Observable<StrictHttpResponse<PacienteRes>> {
    return editarPaciente(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editarPaciente$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editarPaciente(params: EditarPaciente$Params, context?: HttpContext): Observable<PacienteRes> {
    return this.editarPaciente$Response(params, context).pipe(
      map((r: StrictHttpResponse<PacienteRes>): PacienteRes => r.body)
    );
  }

  /** Path part for operation `eliminarPaciente()` */
  static readonly EliminarPacientePath = '/pacientes/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `eliminarPaciente()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarPaciente$Response(params: EliminarPaciente$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return eliminarPaciente(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `eliminarPaciente$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarPaciente(params: EliminarPaciente$Params, context?: HttpContext): Observable<string> {
    return this.eliminarPaciente$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `obtenerPacientes()` */
  static readonly ObtenerPacientesPath = '/pacientes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `obtenerPacientes()` instead.
   *
   * This method doesn't expect any request body.
   */
  obtenerPacientes$Response(params?: ObtenerPacientes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PacienteRes>>> {
    return obtenerPacientes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `obtenerPacientes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  obtenerPacientes(params?: ObtenerPacientes$Params, context?: HttpContext): Observable<Array<PacienteRes>> {
    return this.obtenerPacientes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PacienteRes>>): Array<PacienteRes> => r.body)
    );
  }

  /** Path part for operation `crearPaciente()` */
  static readonly CrearPacientePath = '/pacientes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearPaciente()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  crearPaciente$Response(params: CrearPaciente$Params, context?: HttpContext): Observable<StrictHttpResponse<PacienteRes>> {
    return crearPaciente(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearPaciente$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  crearPaciente(params: CrearPaciente$Params, context?: HttpContext): Observable<PacienteRes> {
    return this.crearPaciente$Response(params, context).pipe(
      map((r: StrictHttpResponse<PacienteRes>): PacienteRes => r.body)
    );
  }

}
